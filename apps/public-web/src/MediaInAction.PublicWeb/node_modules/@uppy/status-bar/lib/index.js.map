{"version":3,"sources":["index.js"],"names":["require","Plugin","Translator","StatusBarUI","statusBarStates","getSpeed","getBytesRemaining","getTextDirection","module","exports","uppy","opts","startUpload","getState","recoveredState","emit","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","setOptions","newOpts","translator","locale","i18n","translate","setPluginState","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","isAllErrored","isAllComplete","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","Object","keys","i","length","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","capabilities","allowNewUpload","totalProgress","error","filesArray","map","newFiles","filter","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","startedFiles","processingFiles","totalETA","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","isUploadStarted","isAllPaused","isUploadInProgress","resumableUploads","supportsUploadProgress","uploadProgress","isSomeGhost","some","isGhost","uploadState","numUploads","pauseAll","resumeAll","retryAll","cancelAll","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION"],"mappings":"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","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst Translator = require('@uppy/utils/lib/Translator')\nconst StatusBarUI = require('./StatusBar')\nconst statusBarStates = require('./StatusBarStates')\nconst getSpeed = require('@uppy/utils/lib/getSpeed')\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining')\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection')\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nmodule.exports = class StatusBar extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded',\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files',\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files',\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added',\n        },\n      },\n    }\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  setOptions (newOpts) {\n    super.setOptions(newOpts)\n    this.i18nInit()\n  }\n\n  i18nInit () {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale])\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.setPluginState() // so that UI re-renders and we see the updated locale\n  }\n\n  getTotalSpeed (files) {\n    let totalSpeed = 0\n    files.forEach((file) => {\n      totalSpeed += getSpeed(file.progress)\n    })\n    return totalSpeed\n  }\n\n  getTotalETA (files) {\n    const totalSpeed = this.getTotalSpeed(files)\n    if (totalSpeed === 0) {\n      return 0\n    }\n\n    const totalBytesRemaining = files.reduce((total, file) => {\n      return total + getBytesRemaining(file.progress)\n    }, 0)\n\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10\n  }\n\n  startUpload = () => {\n    const { recoveredState } = this.uppy.getState()\n    if (recoveredState) {\n      this.uppy.emit('restore-confirmed')\n      return\n    }\n    return this.uppy.upload().catch(() => {\n      // Error logged in Core\n    })\n  }\n\n  getUploadingState (isAllErrored, isAllComplete, recoveredState, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR\n    }\n\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE\n    }\n\n    if (recoveredState) {\n      return statusBarStates.STATE_WAITING\n    }\n\n    let state = statusBarStates.STATE_WAITING\n    const fileIDs = Object.keys(files)\n    for (let i = 0; i < fileIDs.length; i++) {\n      const progress = files[fileIDs[i]].progress\n      // If ANY files are being uploaded right now, show the uploading state.\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING\n      }\n      // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING\n      }\n      // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING\n      }\n    }\n    return state\n  }\n\n  render (state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState,\n    } = state\n\n    // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    const filesArray = Object.keys(files).map(file => files[file])\n\n    let newFiles = filesArray.filter((file) => {\n      return !file.progress.uploadStarted\n        && !file.progress.preprocess\n        && !file.progress.postprocess\n    })\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    if (recoveredState) {\n      newFiles = filesArray\n    }\n\n    const uploadStartedFiles = filesArray.filter(file => file.progress.uploadStarted)\n    const pausedFiles = uploadStartedFiles.filter(file => file.isPaused)\n    const completeFiles = filesArray.filter(file => file.progress.uploadComplete)\n    const erroredFiles = filesArray.filter(file => file.error)\n\n    const inProgressFiles = filesArray.filter((file) => {\n      return !file.progress.uploadComplete\n             && file.progress.uploadStarted\n    })\n\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused)\n\n    const startedFiles = filesArray.filter((file) => {\n      return file.progress.uploadStarted\n        || file.progress.preprocess\n        || file.progress.postprocess\n    })\n\n    const processingFiles = filesArray.filter(file => file.progress.preprocess || file.progress.postprocess)\n\n    const totalETA = this.getTotalETA(inProgressNotPausedFiles)\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n    startedFiles.forEach((file) => {\n      totalSize += (file.progress.bytesTotal || 0)\n      totalUploadedSize += (file.progress.bytesUploaded || 0)\n    })\n\n    const isUploadStarted = startedFiles.length > 0\n\n    const isAllComplete = totalProgress === 100\n      && completeFiles.length === Object.keys(files).length\n      && processingFiles.length === 0\n\n    const isAllErrored = error && erroredFiles.length === filesArray.length\n\n    const isAllPaused = inProgressFiles.length !== 0\n      && pausedFiles.length === inProgressFiles.length\n\n    const isUploadInProgress = inProgressFiles.length > 0\n    const resumableUploads = capabilities.resumableUploads || false\n    const supportsUploadProgress = capabilities.uploadProgress !== false\n    const isSomeGhost = filesArray.some((file) => file.isGhost)\n\n    return StatusBarUI({\n      error,\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFiles.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      pauseAll: this.uppy.pauseAll,\n      resumeAll: this.uppy.resumeAll,\n      retryAll: this.uppy.retryAll,\n      cancelAll: this.uppy.cancelAll,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl,\n    })\n  }\n\n  onMount () {\n    // Set the text direction if the page has not defined one.\n    const element = this.el\n    const direction = getTextDirection(element)\n    if (!direction) {\n      element.dir = 'ltr'\n    }\n  }\n\n  install () {\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}