{
  "definitions": {
    "logLevel": {
      "properties": {
        "StackExchange.Redis": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "RabbitMQ.Client": {
          "$ref": "#/definitions/logLevelThreshold"
        }
      }
    }
  },
  "properties": {
    "Aspire": {
      "type": "object",
      "properties": {
        "StackExchange": {
          "type": "object",
          "properties": {
            "Redis": {
              "type": "object",
              "properties": {
                "ConfigurationOptions": {
                  "type": "object",
                  "properties": {
                    "AbortOnConnectFail": {
                      "type": "boolean",
                      "description": "Gets or sets whether connect/configuration timeouts should be explicitly notified via a TimeoutException."
                    },
                    "AllowAdmin": {
                      "type": "boolean",
                      "description": "Indicates whether admin operations should be allowed."
                    },
                    "AsyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for asynchronous operations (defaults to SyncTimeout)."
                    },
                    "ChannelPrefix": {
                      "type": "object",
                      "properties": {
                        "UseImplicitAutoPattern": {
                          "type": "boolean",
                          "description": "Indicates whether channels should use \u0027StackExchange.Redis.RedisChannel.PatternMode.Auto\u0027 when no \u0027StackExchange.Redis.RedisChannel.PatternMode\u0027 is specified; this is enabled by default, but can be disabled to avoid unexpected wildcard scenarios."
                        }
                      },
                      "description": "Automatically encodes and decodes channels."
                    },
                    "CheckCertificateRevocation": {
                      "type": "boolean",
                      "description": "A Boolean value that specifies whether the certificate revocation list is checked during authentication."
                    },
                    "ClientName": {
                      "type": "string",
                      "description": "The client name to use for all connections."
                    },
                    "ConfigCheckSeconds": {
                      "type": "integer",
                      "description": "Check configuration every n seconds (every minute by default)."
                    },
                    "ConfigurationChannel": {
                      "type": "string",
                      "description": "Channel to use for broadcasting and listening for configuration change notification."
                    },
                    "ConnectRetry": {
                      "type": "integer",
                      "description": "The number of times to repeat the initial connect cycle if no servers respond promptly."
                    },
                    "ConnectTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that should be allowed for connection (defaults to 5 seconds unless SyncTimeout is higher)."
                    },
                    "DefaultDatabase": {
                      "type": "integer",
                      "description": "Specifies the default database to be used when calling \u0027StackExchange.Redis.ConnectionMultiplexer.GetDatabase(System.Int32,System.Object)\u0027 without any parameters."
                    },
                    "DefaultVersion": {
                      "type": "string",
                      "description": "The server version to assume."
                    },
                    "HeartbeatConsistencyChecks": {
                      "type": "boolean",
                      "description": "Whether to enable ECHO checks on every heartbeat to ensure network stream consistency.\nThis is a rare measure to react to any potential network traffic drops ASAP, terminating the connection."
                    },
                    "HeartbeatInterval": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Controls how often the connection heartbeats. A heartbeat includes:\n- Evaluating if any messages have timed out\n- Evaluating connection status (checking for failures)\n- Sending a server message to keep the connection alive if needed"
                    },
                    "IncludeDetailInExceptions": {
                      "type": "boolean",
                      "description": "Should exceptions include identifiable details? (key names, additional .Data annotations)"
                    },
                    "IncludePerformanceCountersInExceptions": {
                      "type": "boolean",
                      "description": "Should exceptions include performance counter details?"
                    },
                    "KeepAlive": {
                      "type": "integer",
                      "description": "Specifies the time in seconds at which connections should be pinged to ensure validity.\n-1 Defaults to 60 Seconds"
                    },
                    "LibraryName": {
                      "type": "string",
                      "description": "Gets or sets the library name to use for CLIENT SETINFO lib-name calls to Redis during handshake.\nDefaults to \u0022SE.Redis\u0022."
                    },
                    "Password": {
                      "type": "string",
                      "description": "The password to use to authenticate with the server."
                    },
                    "Protocol": {
                      "enum": [
                        "Resp2",
                        "Resp3"
                      ],
                      "description": "Specify the redis protocol type"
                    },
                    "Proxy": {
                      "enum": [
                        "None",
                        "Twemproxy",
                        "Envoyproxy"
                      ],
                      "description": "Type of proxy to use (if any); for example \u0027StackExchange.Redis.Proxy.Twemproxy\u0027."
                    },
                    "ResolveDns": {
                      "type": "boolean",
                      "description": "Indicates whether endpoints should be resolved via DNS before connecting.\nIf enabled the ConnectionMultiplexer will not re-resolve DNS when attempting to re-connect after a connection failure."
                    },
                    "ServiceName": {
                      "type": "string",
                      "description": "The service name used to resolve a service via sentinel."
                    },
                    "SetClientLibrary": {
                      "type": "boolean",
                      "description": "Gets or sets whether the library should identify itself by library-name/version when possible."
                    },
                    "Ssl": {
                      "type": "boolean",
                      "description": "Indicates whether the connection should be encrypted."
                    },
                    "SslHost": {
                      "type": "string",
                      "description": "The target-host to use when validating SSL certificate; setting a value here enables SSL mode."
                    },
                    "SslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "Configures which SSL/TLS protocols should be allowed.  If not set, defaults are chosen by the .NET framework."
                    },
                    "SyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for synchronous operations (defaults to 5 seconds)."
                    },
                    "TieBreaker": {
                      "type": "string",
                      "description": "Tie-breaker used to choose between primaries (must match the endpoint exactly)."
                    },
                    "User": {
                      "type": "string",
                      "description": "The username to use to authenticate with the server."
                    }
                  },
                  "description": "The options relevant to a set of redis connections."
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the comma-delimited configuration string used to connect to the Redis server."
                },
                "DisableHealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the Redis health check is disabled or not.",
                  "default": false
                },
                "DisableTracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                  "default": false
                }
              },
              "description": "Provides the client configuration settings for connecting to a Redis server."
            }
          }
        },
        "RabbitMQ": {
          "type": "object",
          "properties": {
            "Client": {
              "type": "object",
              "properties": {
                "ConnectionFactory": {
                  "type": "object",
                  "properties": {
                    "AmqpUriSslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "The AMQP URI SSL protocols."
                    },
                    "AutomaticRecoveryEnabled": {
                      "type": "boolean",
                      "description": "Set to false to disable automatic connection recovery.\nDefaults to true."
                    },
                    "ClientProvidedName": {
                      "type": "string",
                      "description": "Default client provided name to be used for connections."
                    },
                    "ConsumerDispatchConcurrency": {
                      "type": "integer",
                      "description": "Set to a value greater than one to enable concurrent processing. For a concurrency greater than one \u0027RabbitMQ.Client.IBasicConsumer\u0027 will be offloaded to the worker thread pool so it is important to choose the value for the concurrency wisely to avoid thread pool overloading. \u0027RabbitMQ.Client.IAsyncBasicConsumer\u0027 can handle concurrency much more efficiently due to the non-blocking nature of the consumer.\nDefaults to 1."
                    },
                    "ContinuationTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Amount of time protocol  operations (e.g. queue.declare ) are allowed to take before\ntiming out."
                    },
                    "DefaultAddressFamily": {
                      "enum": [
                        "Unknown",
                        "Unspecified",
                        "Unix",
                        "InterNetwork",
                        "ImpLink",
                        "Pup",
                        "Chaos",
                        "Ipx",
                        "NS",
                        "Iso",
                        "Osi",
                        "Ecma",
                        "DataKit",
                        "Ccitt",
                        "Sna",
                        "DecNet",
                        "DataLink",
                        "Lat",
                        "HyperChannel",
                        "AppleTalk",
                        "NetBios",
                        "VoiceView",
                        "FireFox",
                        "Banyan",
                        "Atm",
                        "InterNetworkV6",
                        "Cluster",
                        "Ieee12844",
                        "Irda",
                        "NetworkDesigners",
                        "Max",
                        "Packet",
                        "ControllerAreaNetwork"
                      ],
                      "description": "Address family used by default.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetwork\u0027 to force to IPv4.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetworkV6\u0027 to force to IPv6.\nOr use \u0027System.Net.Sockets.AddressFamily.Unknown\u0027 to attempt both IPv6 and IPv4."
                    },
                    "DefaultAmqpUriSslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "TLS versions enabled by default: TLSv1.2, v1.1, v1.0."
                    },
                    "DispatchConsumersAsync": {
                      "type": "boolean",
                      "description": "Set to true will enable a asynchronous consumer dispatcher which is compatible with \u0027RabbitMQ.Client.IAsyncBasicConsumer\u0027 .\nDefaults to false."
                    },
                    "Endpoint": {
                      "type": "object",
                      "properties": {
                        "AddressFamily": {
                          "enum": [
                            "Unknown",
                            "Unspecified",
                            "Unix",
                            "InterNetwork",
                            "ImpLink",
                            "Pup",
                            "Chaos",
                            "Ipx",
                            "NS",
                            "Iso",
                            "Osi",
                            "Ecma",
                            "DataKit",
                            "Ccitt",
                            "Sna",
                            "DecNet",
                            "DataLink",
                            "Lat",
                            "HyperChannel",
                            "AppleTalk",
                            "NetBios",
                            "VoiceView",
                            "FireFox",
                            "Banyan",
                            "Atm",
                            "InterNetworkV6",
                            "Cluster",
                            "Ieee12844",
                            "Irda",
                            "NetworkDesigners",
                            "Max",
                            "Packet",
                            "ControllerAreaNetwork"
                          ],
                          "description": "Used to force the address family of the endpoint.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetwork\u0027 to force to IPv4.\nUse \u0027System.Net.Sockets.AddressFamily.InterNetworkV6\u0027 to force to IPv6.\nOr use \u0027System.Net.Sockets.AddressFamily.Unknown\u0027 to attempt both IPv6 and IPv4."
                        },
                        "HostName": {
                          "type": "string",
                          "description": "Retrieve or set the hostname of this \u0027RabbitMQ.Client.AmqpTcpEndpoint\u0027."
                        },
                        "Port": {
                          "type": "integer",
                          "description": "Retrieve or set the port number of this\nAmqpTcpEndpoint. A port number of -1 causes the default\nport number."
                        },
                        "Ssl": {
                          "type": "object",
                          "properties": {
                            "AcceptablePolicyErrors": {
                              "enum": [
                                "None",
                                "RemoteCertificateNotAvailable",
                                "RemoteCertificateNameMismatch",
                                "RemoteCertificateChainErrors"
                              ],
                              "description": "Retrieve or set the set of TLS policy (peer verification) errors that are deemed acceptable."
                            },
                            "CertPassphrase": {
                              "type": "string",
                              "description": "Retrieve or set the client certificate passphrase."
                            },
                            "CertPath": {
                              "type": "string",
                              "description": "Retrieve or set the path to client certificate."
                            },
                            "CheckCertificateRevocation": {
                              "type": "boolean",
                              "description": "Attempts to check certificate revocation status. Default is false.\nSet to true to check peer certificate for revocation."
                            },
                            "Enabled": {
                              "type": "boolean",
                              "description": "Controls if TLS should indeed be used. Set to false to disable TLS\non the connection."
                            },
                            "ServerName": {
                              "type": "string",
                              "description": "Retrieve or set server\u0027s expected name.\nThis MUST match the Subject Alternative Name (SAN) or CN on the peer\u0027s (server\u0027s) leaf certificate,\notherwise the TLS connection will fail."
                            },
                            "Version": {
                              "enum": [
                                "None",
                                "Ssl2",
                                "Ssl3",
                                "Tls",
                                "Default",
                                "Tls11",
                                "Tls12",
                                "Tls13"
                              ],
                              "description": "Retrieve or set the TLS protocol version.\nThe client will let the OS pick a suitable version by using \u0027System.Security.Authentication.SslProtocols.None\u0027 .\nIf this option is disabled, e.g.see via app context, the client will attempt to fall back\nto TLSv1.2."
                            }
                          },
                          "description": "Retrieve the TLS options for this AmqpTcpEndpoint. If not set, null is returned."
                        }
                      },
                      "description": "Connection endpoint."
                    },
                    "HandshakeContinuationTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Amount of time protocol handshake operations are allowed to take before\ntiming out."
                    },
                    "HostName": {
                      "type": "string",
                      "description": "The host to connect to."
                    },
                    "MaxMessageSize": {
                      "type": "integer",
                      "description": "Maximum allowed message size, in bytes, from RabbitMQ.\nCorresponds to the rabbit.max_message_size setting."
                    },
                    "NetworkRecoveryInterval": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Amount of time client will wait for before re-trying  to recover connection."
                    },
                    "Password": {
                      "type": "string",
                      "description": "Password to use when authenticating to the server."
                    },
                    "Port": {
                      "type": "integer",
                      "description": "The port to connect on. \u0027RabbitMQ.Client.AmqpTcpEndpoint.UseDefaultPort\u0027 indicates the default for the protocol should be used."
                    },
                    "RequestedChannelMax": {
                      "type": "integer",
                      "description": "Maximum channel number to ask for."
                    },
                    "RequestedConnectionTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Timeout setting for connection attempts."
                    },
                    "RequestedFrameMax": {
                      "type": "integer",
                      "description": "Frame-max parameter to ask for (in bytes)."
                    },
                    "RequestedHeartbeat": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Heartbeat timeout to use when negotiating with the server."
                    },
                    "SocketReadTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Timeout setting for socket read operations."
                    },
                    "SocketWriteTimeout": {
                      "type": "string",
                      "pattern": "^-?(\\d{1,7}|((\\d{1,7}[\\.:])?(([01]?\\d|2[0-3]):[0-5]?\\d|([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d)(\\.\\d{1,7})?))$",
                      "description": "Timeout setting for socket write operations."
                    },
                    "Ssl": {
                      "type": "object",
                      "properties": {
                        "AcceptablePolicyErrors": {
                          "enum": [
                            "None",
                            "RemoteCertificateNotAvailable",
                            "RemoteCertificateNameMismatch",
                            "RemoteCertificateChainErrors"
                          ],
                          "description": "Retrieve or set the set of TLS policy (peer verification) errors that are deemed acceptable."
                        },
                        "CertPassphrase": {
                          "type": "string",
                          "description": "Retrieve or set the client certificate passphrase."
                        },
                        "CertPath": {
                          "type": "string",
                          "description": "Retrieve or set the path to client certificate."
                        },
                        "CheckCertificateRevocation": {
                          "type": "boolean",
                          "description": "Attempts to check certificate revocation status. Default is false.\nSet to true to check peer certificate for revocation."
                        },
                        "Enabled": {
                          "type": "boolean",
                          "description": "Controls if TLS should indeed be used. Set to false to disable TLS\non the connection."
                        },
                        "ServerName": {
                          "type": "string",
                          "description": "Retrieve or set server\u0027s expected name.\nThis MUST match the Subject Alternative Name (SAN) or CN on the peer\u0027s (server\u0027s) leaf certificate,\notherwise the TLS connection will fail."
                        },
                        "Version": {
                          "enum": [
                            "None",
                            "Ssl2",
                            "Ssl3",
                            "Tls",
                            "Default",
                            "Tls11",
                            "Tls12",
                            "Tls13"
                          ],
                          "description": "Retrieve or set the TLS protocol version.\nThe client will let the OS pick a suitable version by using \u0027System.Security.Authentication.SslProtocols.None\u0027 .\nIf this option is disabled, e.g.see via app context, the client will attempt to fall back\nto TLSv1.2."
                        }
                      },
                      "description": "TLS options setting."
                    },
                    "TopologyRecoveryEnabled": {
                      "type": "boolean",
                      "description": "Set to false to make automatic connection recovery not recover topology (exchanges, queues, bindings, etc).\nDefaults to true."
                    },
                    "Uri": {
                      "type": "string",
                      "format": "uri",
                      "description": "The uri to use for the connection."
                    },
                    "UserName": {
                      "type": "string",
                      "description": "Username to use when authenticating to the server."
                    },
                    "VirtualHost": {
                      "type": "string",
                      "description": "Virtual host to access during this connection."
                    }
                  },
                  "description": "Main entry point to the RabbitMQ .NET AMQP client\nAPI. Constructs \u0027RabbitMQ.Client.IConnection\u0027 instances."
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the connection string of the RabbitMQ server to connect to."
                },
                "DisableHealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the RabbitMQ health check is disabled or not.",
                  "default": false
                },
                "DisableTracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is disabled or not.",
                  "default": false
                },
                "MaxConnectRetryCount": {
                  "type": "integer",
                  "description": "Gets or sets the maximum number of connection retry attempts. Default value is 5, set it to 0 to disable the retry mechanism."
                }
              },
              "description": "Provides the client configuration settings for connecting to a RabbitMQ message broker."
            }
          }
        }
      }
    }
  },
  "type": "object",
  "SourceSegments": "C:\\Users\\debmi\\.nuget\\packages\\aspire.stackexchange.redis\\8.0.1\\ConfigurationSchema.json;C:\\Users\\debmi\\.nuget\\packages\\aspire.rabbitmq.client\\8.0.1\\ConfigurationSchema.json"
}