{"version":3,"sources":["index.js"],"names":["require","Plugin","Socket","Provider","RequestClient","EventTracker","emitSocketProgress","getSocketHost","RateLimitedQueue","Uploader","assertServerError","res","error","Error","message","module","exports","uppy","opts","type","id","title","client","defaultOptions","timeout","limit","retryDelays","createMultipartUpload","bind","listParts","prepareUploadPart","abortMultipartUpload","completeMultipartUpload","upload","requests","uploaders","Object","create","uploaderEvents","uploaderSockets","resetUploaderReferences","fileID","abort","really","remove","close","assertHost","method","companionUrl","file","metadata","keys","meta","map","key","toString","post","filename","name","then","uploadId","encodeURIComponent","get","number","parts","uploadIdEnc","delete","uploadFile","Promise","resolve","reject","onStart","data","cFile","getFile","setFileState","s3Multipart","onProgress","bytesUploaded","bytesTotal","emit","uploader","onError","err","log","queuedRequest","done","onSuccess","result","uploadResp","body","uploadURL","location","onPartComplete","part","getChunkSize","run","isPaused","start","onFileRemove","removed","onCancelAll","onFilePause","pause","onPauseAll","onResumeAll","progress","uploadStarted","isRestored","uploadRemote","serverToken","connectToServerSocket","Client","remote","providerOptions","provider","url","protocol","size","token","catch","host","socket","target","autoOpen","send","onRetry","isOpen","onRetryAll","on","progressData","errData","open","fileIDs","length","promises","isRemote","all","cb","targetFileID","filesToRetry","install","getState","capabilities","setState","resumableUploads","addUploader","uninstall","removeUploader","VERSION"],"mappings":"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","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst { Socket, Provider, RequestClient } = require('@uppy/companion-client')\nconst EventTracker = require('@uppy/utils/lib/EventTracker')\nconst emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress')\nconst getSocketHost = require('@uppy/utils/lib/getSocketHost')\nconst RateLimitedQueue = require('@uppy/utils/lib/RateLimitedQueue')\nconst Uploader = require('./MultipartUploader')\n\nfunction assertServerError (res) {\n  if (res && res.error) {\n    const error = new Error(res.message)\n    Object.assign(error, res.error)\n    throw error\n  }\n  return res\n}\n\nmodule.exports = class AwsS3Multipart extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3Multipart'\n    this.title = 'AWS S3 Multipart'\n    this.client = new RequestClient(uppy, opts)\n\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      retryDelays: [0, 1000, 3000, 5000],\n      createMultipartUpload: this.createMultipartUpload.bind(this),\n      listParts: this.listParts.bind(this),\n      prepareUploadPart: this.prepareUploadPart.bind(this),\n      abortMultipartUpload: this.abortMultipartUpload.bind(this),\n      completeMultipartUpload: this.completeMultipartUpload.bind(this),\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.upload = this.upload.bind(this)\n\n    this.requests = new RateLimitedQueue(this.opts.limit)\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n  }\n\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID].abort({ really: opts.abort || false })\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  assertHost (method) {\n    if (!this.opts.companionUrl) {\n      throw new Error(`Expected a \\`companionUrl\\` option containing a Companion address, or if you are not using Companion, a custom \\`${method}\\` implementation.`)\n    }\n  }\n\n  createMultipartUpload (file) {\n    this.assertHost('createMultipartUpload')\n\n    const metadata = {}\n\n    Object.keys(file.meta).map(key => {\n      if (file.meta[key] != null) {\n        metadata[key] = file.meta[key].toString()\n      }\n    })\n\n    return this.client.post('s3/multipart', {\n      filename: file.name,\n      type: file.type,\n      metadata,\n    }).then(assertServerError)\n  }\n\n  listParts (file, { key, uploadId }) {\n    this.assertHost('listParts')\n\n    const filename = encodeURIComponent(key)\n    return this.client.get(`s3/multipart/${uploadId}?key=${filename}`)\n      .then(assertServerError)\n  }\n\n  prepareUploadPart (file, { key, uploadId, number }) {\n    this.assertHost('prepareUploadPart')\n\n    const filename = encodeURIComponent(key)\n    return this.client.get(`s3/multipart/${uploadId}/${number}?key=${filename}`)\n      .then(assertServerError)\n  }\n\n  completeMultipartUpload (file, { key, uploadId, parts }) {\n    this.assertHost('completeMultipartUpload')\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.client.post(`s3/multipart/${uploadIdEnc}/complete?key=${filename}`, { parts })\n      .then(assertServerError)\n  }\n\n  abortMultipartUpload (file, { key, uploadId }) {\n    this.assertHost('abortMultipartUpload')\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.client.delete(`s3/multipart/${uploadIdEnc}?key=${filename}`)\n      .then(assertServerError)\n  }\n\n  uploadFile (file) {\n    return new Promise((resolve, reject) => {\n      const onStart = (data) => {\n        const cFile = this.uppy.getFile(file.id)\n        this.uppy.setFileState(file.id, {\n          s3Multipart: {\n            ...cFile.s3Multipart,\n            key: data.key,\n            uploadId: data.uploadId,\n          },\n        })\n      }\n\n      const onProgress = (bytesUploaded, bytesTotal) => {\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      const onError = (err) => {\n        this.uppy.log(err)\n        this.uppy.emit('upload-error', file, err)\n\n        queuedRequest.done()\n        this.resetUploaderReferences(file.id)\n        reject(err)\n      }\n\n      const onSuccess = (result) => {\n        const uploadResp = {\n          body: {\n            ...result,\n          },\n          uploadURL: result.location,\n        }\n\n        queuedRequest.done()\n        this.resetUploaderReferences(file.id)\n\n        const cFile = this.uppy.getFile(file.id)\n        this.uppy.emit('upload-success', cFile || file, uploadResp)\n\n        if (result.location) {\n          this.uppy.log(`Download ${upload.file.name} from ${result.location}`)\n        }\n\n        resolve(upload)\n      }\n\n      const onPartComplete = (part) => {\n        const cFile = this.uppy.getFile(file.id)\n        if (!cFile) {\n          return\n        }\n\n        this.uppy.emit('s3-multipart:part-uploaded', cFile, part)\n      }\n\n      const upload = new Uploader(file.data, {\n        // .bind to pass the file object to each handler.\n        createMultipartUpload: this.opts.createMultipartUpload.bind(this, file),\n        listParts: this.opts.listParts.bind(this, file),\n        prepareUploadPart: this.opts.prepareUploadPart.bind(this, file),\n        completeMultipartUpload: this.opts.completeMultipartUpload.bind(this, file),\n        abortMultipartUpload: this.opts.abortMultipartUpload.bind(this, file),\n        getChunkSize: this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : null,\n\n        onStart,\n        onProgress,\n        onError,\n        onSuccess,\n        onPartComplete,\n\n        limit: this.opts.limit || 5,\n        retryDelays: this.opts.retryDelays || [],\n        ...file.s3Multipart,\n      })\n\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      let queuedRequest = this.requests.run(() => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        return () => {}\n      })\n\n      this.onFileRemove(file.id, (removed) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${removed.id} was removed`)\n      })\n\n      this.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          upload.pause()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            upload.start()\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.pause()\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(() => {\n          upload.start()\n          return () => {}\n        })\n      })\n\n      // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n      if (!file.progress.uploadStarted || !file.isRestored) {\n        this.uppy.emit('upload-started', file)\n      }\n    })\n  }\n\n  uploadRemote (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Don't double-emit upload-started for Golden Retriever-restored files that were already started\n    if (!file.progress.uploadStarted || !file.isRestored) {\n      this.uppy.emit('upload-started', file)\n    }\n\n    if (file.serverToken) {\n      return this.connectToServerSocket(file)\n    }\n\n    return new Promise((resolve, reject) => {\n      const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n      const client = new Client(this.uppy, file.remote.providerOptions)\n      client.post(\n        file.remote.url,\n        {\n          ...file.remote.body,\n          protocol: 's3-multipart',\n          size: file.data.size,\n          metadata: file.meta,\n        }\n      ).then((res) => {\n        this.uppy.setFileState(file.id, { serverToken: res.token })\n        file = this.uppy.getFile(file.id)\n        return file\n      }).then((file) => {\n        return this.connectToServerSocket(file)\n      }).then(() => {\n        resolve()\n      }).catch((err) => {\n        this.uppy.emit('upload-error', file, err)\n        reject(err)\n      })\n    })\n  }\n\n  connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      this.onFileRemove(file.id, (removed) => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          socket.send('pause', {})\n        } else {\n          // Resuming an upload should be queued, else you could pause and then resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.send('resume', {})\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n      })\n\n      this.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.send('resume', {})\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        this.uppy.emit('upload-error', file, new Error(errData.error))\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n        reject(new Error(errData.error))\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n        resolve()\n      })\n\n      let queuedRequest = this.requests.run(() => {\n        socket.open()\n        if (file.isPaused) {\n          socket.send('pause', {})\n        }\n\n        return () => {}\n      })\n    })\n  }\n\n  upload (fileIDs) {\n    if (fileIDs.length === 0) return Promise.resolve()\n\n    const promises = fileIDs.map((id) => {\n      const file = this.uppy.getFile(id)\n      if (file.isRemote) {\n        return this.uploadRemote(file)\n      }\n      return this.uploadFile(file)\n    })\n\n    return Promise.all(promises)\n  }\n\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  onFilePause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        // const isPaused = this.uppy.pauseResume(fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', (filesToRetry) => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  onCancelAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('cancel-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  install () {\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        resumableUploads: true,\n      },\n    })\n    this.uppy.addUploader(this.upload)\n  }\n\n  uninstall () {\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        resumableUploads: false,\n      },\n    })\n    this.uppy.removeUploader(this.upload)\n  }\n}\n"]}