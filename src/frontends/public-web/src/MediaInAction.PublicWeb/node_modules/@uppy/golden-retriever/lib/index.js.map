{"version":3,"sources":["index.js"],"names":["throttle","require","Plugin","ServiceWorkerStore","IndexedDBStore","MetaDataStore","module","exports","uppy","opts","addBlobToStores","file","isRemote","put","catch","err","log","removeBlobFromStores","delete","id","replaceBlobInStores","handleRestoreConfirmed","getState","currentUploads","Object","keys","forEach","uploadId","restore","resumeAll","upload","setState","recoveredState","abortRestore","fileIDs","files","deleteBlobs","then","length","cancelAll","cleanup","handleComplete","successful","map","restoreBlobs","getFiles","Promise","all","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","resultingArrayOfObjects","blobs","onBlobsLoaded","type","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","leading","trailing","restoreState","savedState","load","savedPluginData","pluginData","getWaitingFiles","waitingFiles","progress","uploadStarted","getUploadingFiles","uploadingFiles","uploadIDs","uploadID","filesInUpload","fileID","getFile","filesToSave","filesToSaveWithoutData","isRestored","data","preview","emit","save","resolve","list","localFilesOnly","filter","numberOfFilesRecovered","numberOfFilesTryingToRecover","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isGhost","promises","install","on","uninstall","off","VERSION"],"mappings":"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","sourcesContent":["const throttle = require('lodash.throttle')\nconst { Plugin } = require('@uppy/core')\nconst ServiceWorkerStore = require('./ServiceWorkerStore')\nconst IndexedDBStore = require('./IndexedDBStore')\nconst MetaDataStore = require('./MetaDataStore')\n\n/**\n * The GoldenRetriever plugin — restores selected files and resumes uploads\n * after a closed tab or a browser crash!\n *\n * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n * https://uppy.io/blog/2017/07/golden-retriever/\n */\nmodule.exports = class GoldenRetriever extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'debugger'\n    this.id = this.opts.id || 'GoldenRetriever'\n    this.title = 'Golden Retriever'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID(),\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore({\n      expires: this.opts.expires,\n      ...this.opts.indexedDB || {},\n      storeName: uppy.getID(),\n    })\n\n    this.saveFilesStateToLocalStorage = throttle(\n      this.saveFilesStateToLocalStorage.bind(this),\n      500,\n      { leading: true, trailing: true }\n    )\n    this.restoreState = this.restoreState.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  restoreState () {\n    const savedState = this.MetaDataStore.load()\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {},\n        recoveredState: savedState,\n      })\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    this.uppy.getFiles().forEach((file) => {\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[file.id] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = {\n      ...this.getWaitingFiles(),\n      ...this.getUploadingFiles(),\n    }\n\n    // If all files have been removed by the user, clear recovery state\n    if (Object.keys(filesToSave).length === 0) {\n      this.uppy.setState({ recoveredState: null })\n      MetaDataStore.cleanup(this.uppy.opts.id)\n      return\n    }\n\n    // We dont’t need to store file.data on local files, because the actual blob will be restored later,\n    // and we want to avoid having weird properties in the serialized object.\n    // Also adding file.isRestored to all files, since they will be restored from local storage\n    const filesToSaveWithoutData = {}\n    Object.keys(filesToSave).forEach((file) => {\n      if (filesToSave[file].isRemote) {\n        filesToSaveWithoutData[file] = {\n          ...filesToSave[file],\n          isRestored: true,\n        }\n      } else {\n        filesToSaveWithoutData[file] = {\n          ...filesToSave[file],\n          isRestored: true,\n          data: null,\n          preview: null,\n        }\n      }\n    })\n\n    const pluginData = {}\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    const { currentUploads } = this.uppy.getState()\n\n    this.MetaDataStore.save({\n      currentUploads,\n      files: filesToSaveWithoutData,\n      pluginData,\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    if (!this.ServiceWorkerStore) {\n      return Promise.resolve({})\n    }\n\n    return this.ServiceWorkerStore.list().then((blobs) => {\n      const files = this.uppy.getFiles()\n      const localFilesOnly = files.filter((file) => {\n        // maybe && !file.progress.uploadComplete\n        return !file.isRemote\n      })\n\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      const numberOfFilesTryingToRecover = localFilesOnly.length\n\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    return this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = { ...this.uppy.getState().files }\n\n    // Loop through blobs that we can restore, add blobs to file objects\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true,\n        isGhost: false,\n      }\n      updatedFiles[fileID] = { ...originalFile, ...updatedFileData }\n    })\n\n    // Loop through files that we can’t restore fully — we only have meta, not blobs,\n    // set .isGhost on them, also set isRestored to all files\n    Object.keys(updatedFiles).forEach((fileID) => {\n      if (updatedFiles[fileID].data === null) {\n        updatedFiles[fileID] = {\n          ...updatedFiles[fileID],\n          isGhost: true,\n        }\n      }\n    })\n\n    this.uppy.setState({\n      files: updatedFiles,\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\n        this.uppy.log(err)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    const promises = []\n    fileIDs.forEach((id) => {\n      if (this.ServiceWorkerStore) {\n        promises.push(this.ServiceWorkerStore.delete(id))\n      }\n      if (this.IndexedDBStore) {\n        promises.push(this.IndexedDBStore.delete(id))\n      }\n    })\n    return Promise.all(promises)\n  }\n\n  addBlobToStores = (file) => {\n    if (file.isRemote) return\n\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n\n    this.IndexedDBStore.put(file).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  removeBlobFromStores = (file) => {\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n    this.IndexedDBStore.delete(file.id).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  replaceBlobInStores = (file) => {\n    this.removeBlobFromStores(file)\n    this.addBlobToStores(file)\n  }\n\n  handleRestoreConfirmed = () => {\n    this.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...')\n    // start all uploads again when file blobs are restored\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      Object.keys(currentUploads).forEach((uploadId) => {\n        this.uppy.restore(uploadId, currentUploads[uploadId])\n      })\n      this.uppy.resumeAll()\n    }\n    this.uppy.upload()\n    this.uppy.setState({ recoveredState: null })\n  }\n\n  abortRestore = () => {\n    this.uppy.log('[GoldenRetriever] Aborting restore...')\n\n    const fileIDs = Object.keys(this.uppy.getState().files)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${fileIDs.length} files`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${fileIDs.length} files`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.cancelAll()\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  handleComplete = ({ successful }) => {\n    const fileIDs = successful.map((file) => file.id)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  restoreBlobs = () => {\n    if (this.uppy.getFiles().length > 0) {\n      Promise.all([\n        this.loadFileBlobsFromServiceWorker(),\n        this.loadFileBlobsFromIndexedDB(),\n      ]).then((resultingArrayOfObjects) => {\n        const blobs = { ...resultingArrayOfObjects[0], ...resultingArrayOfObjects[1] }\n        this.onBlobsLoaded(blobs)\n      })\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\n      this.onBlobsLoaded([])\n    }\n  }\n\n  install () {\n    this.restoreState()\n    this.restoreBlobs()\n\n    this.uppy.on('file-added', this.addBlobToStores)\n    this.uppy.on('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.on('file-removed', this.removeBlobFromStores)\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.on('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.on('restore-canceled', this.abortRestore)\n    this.uppy.on('complete', this.handleComplete)\n  }\n\n  uninstall () {\n    this.uppy.off('file-added', this.addBlobToStores)\n    this.uppy.off('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.off('file-removed', this.removeBlobFromStores)\n    this.uppy.off('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.off('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.off('restore-canceled', this.abortRestore)\n    this.uppy.off('complete', this.handleComplete)\n  }\n}\n"]}