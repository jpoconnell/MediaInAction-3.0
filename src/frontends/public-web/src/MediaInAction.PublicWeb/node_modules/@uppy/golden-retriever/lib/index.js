var _class, _temp;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var throttle = require('lodash.throttle');

var _require = require('@uppy/core'),
    Plugin = _require.Plugin;

var ServiceWorkerStore = require('./ServiceWorkerStore');

var IndexedDBStore = require('./IndexedDBStore');

var MetaDataStore = require('./MetaDataStore');
/**
 * The GoldenRetriever plugin — restores selected files and resumes uploads
 * after a closed tab or a browser crash!
 *
 * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:
 * https://uppy.io/blog/2017/07/golden-retriever/
 */


module.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {
  _inheritsLoose(GoldenRetriever, _Plugin);

  function GoldenRetriever(uppy, opts) {
    var _this;

    _this = _Plugin.call(this, uppy, opts) || this;

    _this.addBlobToStores = function (file) {
      if (file.isRemote) return;

      if (_this.ServiceWorkerStore) {
        _this.ServiceWorkerStore.put(file).catch(function (err) {
          _this.uppy.log('[GoldenRetriever] Could not store file', 'warning');

          _this.uppy.log(err);
        });
      }

      _this.IndexedDBStore.put(file).catch(function (err) {
        _this.uppy.log('[GoldenRetriever] Could not store file', 'warning');

        _this.uppy.log(err);
      });
    };

    _this.removeBlobFromStores = function (file) {
      if (_this.ServiceWorkerStore) {
        _this.ServiceWorkerStore.delete(file.id).catch(function (err) {
          _this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning');

          _this.uppy.log(err);
        });
      }

      _this.IndexedDBStore.delete(file.id).catch(function (err) {
        _this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning');

        _this.uppy.log(err);
      });
    };

    _this.replaceBlobInStores = function (file) {
      _this.removeBlobFromStores(file);

      _this.addBlobToStores(file);
    };

    _this.handleRestoreConfirmed = function () {
      _this.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...'); // start all uploads again when file blobs are restored


      var _this$uppy$getState = _this.uppy.getState(),
          currentUploads = _this$uppy$getState.currentUploads;

      if (currentUploads) {
        Object.keys(currentUploads).forEach(function (uploadId) {
          _this.uppy.restore(uploadId, currentUploads[uploadId]);
        });

        _this.uppy.resumeAll();
      }

      _this.uppy.upload();

      _this.uppy.setState({
        recoveredState: null
      });
    };

    _this.abortRestore = function () {
      _this.uppy.log('[GoldenRetriever] Aborting restore...');

      var fileIDs = Object.keys(_this.uppy.getState().files);

      _this.deleteBlobs(fileIDs).then(function () {
        _this.uppy.log("[GoldenRetriever] Removed " + fileIDs.length + " files");
      }).catch(function (err) {
        _this.uppy.log("[GoldenRetriever] Could not remove " + fileIDs.length + " files", 'warning');

        _this.uppy.log(err);
      });

      _this.uppy.cancelAll();

      _this.uppy.setState({
        recoveredState: null
      });

      MetaDataStore.cleanup(_this.uppy.opts.id);
    };

    _this.handleComplete = function (_ref) {
      var successful = _ref.successful;
      var fileIDs = successful.map(function (file) {
        return file.id;
      });

      _this.deleteBlobs(fileIDs).then(function () {
        _this.uppy.log("[GoldenRetriever] Removed " + successful.length + " files that finished uploading");
      }).catch(function (err) {
        _this.uppy.log("[GoldenRetriever] Could not remove " + successful.length + " files that finished uploading", 'warning');

        _this.uppy.log(err);
      });

      _this.uppy.setState({
        recoveredState: null
      });

      MetaDataStore.cleanup(_this.uppy.opts.id);
    };

    _this.restoreBlobs = function () {
      if (_this.uppy.getFiles().length > 0) {
        Promise.all([_this.loadFileBlobsFromServiceWorker(), _this.loadFileBlobsFromIndexedDB()]).then(function (resultingArrayOfObjects) {
          var blobs = _extends({}, resultingArrayOfObjects[0], resultingArrayOfObjects[1]);

          _this.onBlobsLoaded(blobs);
        });
      } else {
        _this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...');

        _this.onBlobsLoaded([]);
      }
    };

    _this.type = 'debugger';
    _this.id = _this.opts.id || 'GoldenRetriever';
    _this.title = 'Golden Retriever';
    var defaultOptions = {
      expires: 24 * 60 * 60 * 1000,
      // 24 hours
      serviceWorker: false
    };
    _this.opts = _extends({}, defaultOptions, opts);
    _this.MetaDataStore = new MetaDataStore({
      expires: _this.opts.expires,
      storeName: uppy.getID()
    });
    _this.ServiceWorkerStore = null;

    if (_this.opts.serviceWorker) {
      _this.ServiceWorkerStore = new ServiceWorkerStore({
        storeName: uppy.getID()
      });
    }

    _this.IndexedDBStore = new IndexedDBStore(_extends({
      expires: _this.opts.expires
    }, _this.opts.indexedDB || {}, {
      storeName: uppy.getID()
    }));
    _this.saveFilesStateToLocalStorage = throttle(_this.saveFilesStateToLocalStorage.bind(_assertThisInitialized(_this)), 500, {
      leading: true,
      trailing: true
    });
    _this.restoreState = _this.restoreState.bind(_assertThisInitialized(_this));
    _this.loadFileBlobsFromServiceWorker = _this.loadFileBlobsFromServiceWorker.bind(_assertThisInitialized(_this));
    _this.loadFileBlobsFromIndexedDB = _this.loadFileBlobsFromIndexedDB.bind(_assertThisInitialized(_this));
    _this.onBlobsLoaded = _this.onBlobsLoaded.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = GoldenRetriever.prototype;

  _proto.restoreState = function restoreState() {
    var savedState = this.MetaDataStore.load();

    if (savedState) {
      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage');
      this.uppy.setState({
        currentUploads: savedState.currentUploads || {},
        files: savedState.files || {},
        recoveredState: savedState
      });
      this.savedPluginData = savedState.pluginData;
    }
  }
  /**
   * Get file objects that are currently waiting: they've been selected,
   * but aren't yet being uploaded.
   */
  ;

  _proto.getWaitingFiles = function getWaitingFiles() {
    var waitingFiles = {};
    this.uppy.getFiles().forEach(function (file) {
      if (!file.progress || !file.progress.uploadStarted) {
        waitingFiles[file.id] = file;
      }
    });
    return waitingFiles;
  }
  /**
   * Get file objects that are currently being uploaded. If a file has finished
   * uploading, but the other files in the same batch have not, the finished
   * file is also returned.
   */
  ;

  _proto.getUploadingFiles = function getUploadingFiles() {
    var _this2 = this;

    var uploadingFiles = {};

    var _this$uppy$getState2 = this.uppy.getState(),
        currentUploads = _this$uppy$getState2.currentUploads;

    if (currentUploads) {
      var uploadIDs = Object.keys(currentUploads);
      uploadIDs.forEach(function (uploadID) {
        var filesInUpload = currentUploads[uploadID].fileIDs;
        filesInUpload.forEach(function (fileID) {
          uploadingFiles[fileID] = _this2.uppy.getFile(fileID);
        });
      });
    }

    return uploadingFiles;
  };

  _proto.saveFilesStateToLocalStorage = function saveFilesStateToLocalStorage() {
    var filesToSave = _extends({}, this.getWaitingFiles(), this.getUploadingFiles()); // If all files have been removed by the user, clear recovery state


    if (Object.keys(filesToSave).length === 0) {
      this.uppy.setState({
        recoveredState: null
      });
      MetaDataStore.cleanup(this.uppy.opts.id);
      return;
    } // We dont’t need to store file.data on local files, because the actual blob will be restored later,
    // and we want to avoid having weird properties in the serialized object.
    // Also adding file.isRestored to all files, since they will be restored from local storage


    var filesToSaveWithoutData = {};
    Object.keys(filesToSave).forEach(function (file) {
      if (filesToSave[file].isRemote) {
        filesToSaveWithoutData[file] = _extends({}, filesToSave[file], {
          isRestored: true
        });
      } else {
        filesToSaveWithoutData[file] = _extends({}, filesToSave[file], {
          isRestored: true,
          data: null,
          preview: null
        });
      }
    });
    var pluginData = {}; // TODO Find a better way to do this?
    // Other plugins can attach a restore:get-data listener that receives this callback.
    // Plugins can then use this callback (sync) to provide data to be stored.

    this.uppy.emit('restore:get-data', function (data) {
      _extends(pluginData, data);
    });

    var _this$uppy$getState3 = this.uppy.getState(),
        currentUploads = _this$uppy$getState3.currentUploads;

    this.MetaDataStore.save({
      currentUploads: currentUploads,
      files: filesToSaveWithoutData,
      pluginData: pluginData
    });
  };

  _proto.loadFileBlobsFromServiceWorker = function loadFileBlobsFromServiceWorker() {
    var _this3 = this;

    if (!this.ServiceWorkerStore) {
      return Promise.resolve({});
    }

    return this.ServiceWorkerStore.list().then(function (blobs) {
      var files = _this3.uppy.getFiles();

      var localFilesOnly = files.filter(function (file) {
        // maybe && !file.progress.uploadComplete
        return !file.isRemote;
      });
      var numberOfFilesRecovered = Object.keys(blobs).length;
      var numberOfFilesTryingToRecover = localFilesOnly.length;

      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {
        _this3.uppy.log("[GoldenRetriever] Successfully recovered " + numberOfFilesRecovered + " blobs from Service Worker!");

        return blobs;
      }

      _this3.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...');

      return {};
    }).catch(function (err) {
      _this3.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning');

      _this3.uppy.log(err);

      return {};
    });
  };

  _proto.loadFileBlobsFromIndexedDB = function loadFileBlobsFromIndexedDB() {
    var _this4 = this;

    return this.IndexedDBStore.list().then(function (blobs) {
      var numberOfFilesRecovered = Object.keys(blobs).length;

      if (numberOfFilesRecovered > 0) {
        _this4.uppy.log("[GoldenRetriever] Successfully recovered " + numberOfFilesRecovered + " blobs from IndexedDB!");

        return blobs;
      }

      _this4.uppy.log('[GoldenRetriever] No blobs found in IndexedDB');

      return {};
    }).catch(function (err) {
      _this4.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning');

      _this4.uppy.log(err);

      return {};
    });
  };

  _proto.onBlobsLoaded = function onBlobsLoaded(blobs) {
    var _this5 = this;

    var obsoleteBlobs = [];

    var updatedFiles = _extends({}, this.uppy.getState().files); // Loop through blobs that we can restore, add blobs to file objects


    Object.keys(blobs).forEach(function (fileID) {
      var originalFile = _this5.uppy.getFile(fileID);

      if (!originalFile) {
        obsoleteBlobs.push(fileID);
        return;
      }

      var cachedData = blobs[fileID];
      var updatedFileData = {
        data: cachedData,
        isRestored: true,
        isGhost: false
      };
      updatedFiles[fileID] = _extends({}, originalFile, updatedFileData);
    }); // Loop through files that we can’t restore fully — we only have meta, not blobs,
    // set .isGhost on them, also set isRestored to all files

    Object.keys(updatedFiles).forEach(function (fileID) {
      if (updatedFiles[fileID].data === null) {
        updatedFiles[fileID] = _extends({}, updatedFiles[fileID], {
          isGhost: true
        });
      }
    });
    this.uppy.setState({
      files: updatedFiles
    });
    this.uppy.emit('restored', this.savedPluginData);

    if (obsoleteBlobs.length) {
      this.deleteBlobs(obsoleteBlobs).then(function () {
        _this5.uppy.log("[GoldenRetriever] Cleaned up " + obsoleteBlobs.length + " old files");
      }).catch(function (err) {
        _this5.uppy.log("[GoldenRetriever] Could not clean up " + obsoleteBlobs.length + " old files", 'warning');

        _this5.uppy.log(err);
      });
    }
  };

  _proto.deleteBlobs = function deleteBlobs(fileIDs) {
    var _this6 = this;

    var promises = [];
    fileIDs.forEach(function (id) {
      if (_this6.ServiceWorkerStore) {
        promises.push(_this6.ServiceWorkerStore.delete(id));
      }

      if (_this6.IndexedDBStore) {
        promises.push(_this6.IndexedDBStore.delete(id));
      }
    });
    return Promise.all(promises);
  };

  _proto.install = function install() {
    this.restoreState();
    this.restoreBlobs();
    this.uppy.on('file-added', this.addBlobToStores);
    this.uppy.on('file-editor:complete', this.replaceBlobInStores);
    this.uppy.on('file-removed', this.removeBlobFromStores);
    this.uppy.on('state-update', this.saveFilesStateToLocalStorage);
    this.uppy.on('restore-confirmed', this.handleRestoreConfirmed);
    this.uppy.on('restore-canceled', this.abortRestore);
    this.uppy.on('complete', this.handleComplete);
  };

  _proto.uninstall = function uninstall() {
    this.uppy.off('file-added', this.addBlobToStores);
    this.uppy.off('file-editor:complete', this.replaceBlobInStores);
    this.uppy.off('file-removed', this.removeBlobFromStores);
    this.uppy.off('state-update', this.saveFilesStateToLocalStorage);
    this.uppy.off('restore-confirmed', this.handleRestoreConfirmed);
    this.uppy.off('restore-canceled', this.abortRestore);
    this.uppy.off('complete', this.handleComplete);
  };

  return GoldenRetriever;
}(Plugin), _class.VERSION = "1.4.2", _temp);